/**
 * 
 */
package com.linkedlist.src;

import java.util.Iterator;
import java.util.ListIterator;

/**
 * @author arjunflex
 * 
 */
public class LinkedList<Item> implements Iterable<Item> {

	private Node first_element;
	private Node last_element;
	private int length;

	@Override
	public Iterator<Item> iterator() {
		return new LinkedListIterator<Item>();
	}

	public void add(Item item) {
		Node node = new Node();
		node.item = item;
		node.next = null;

		/*
		 * Check for the first element 
		 * It's the first element 
		 */

		if (length == 0 
				&& first_element == null 
				&& last_element == null) {
			first_element = node;
			last_element = node;
		} else {
			last_element.next = node;
			last_element = node;
		}
		
		length++;
	}
	
	public boolean isListEmpty() {
		if(length == 0 && first_element == null && last_element == null) {
			return true;
		}
		
		return false;
	}
	
	
	public void reverseLinks() {
		reverseList(first_element, first_element.next);
		Node temp = first_element;
		 first_element = last_element;
		 last_element = temp;
		
	}
	
	private Node reverseList(Node firstelement, Node secondelement) {
		if(secondelement.next == null) {
			secondelement.next = firstelement;
			return firstelement;
		}else {
			return reverseList(secondelement,secondelement.next).next = secondelement;
		}
		
	}
	
	
	private class LinkedListIterator<Item> implements Iterator<Item> {
		
		private Node current_element = first_element;
		
		public void reset() {
			current_element = first_element;
		}

		@Override
		public boolean hasNext() {
			if(current_element != null) {
				return true;
			}
			return false;
		}

		@Override
		public Item next() {
			Item item = null;
			if(hasNext()) {
				item = (Item) current_element.item;
				current_element = current_element.next;
			}
			
			return item;
		}

		@Override
		public void remove() {
			
		}
		
	}

}
